// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.Api.Data;

#nullable disable

namespace TaskManager.Api.Migrations
{
    [DbContext(typeof(TaskContext))]
    partial class TaskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("TaskManager.Api.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Categories_Name_Unique");

                    b.ToTable("Categories", null, t =>
                        {
                            t.HasCheckConstraint("CK_Categories_Color_Format", "Color IS NULL OR (LENGTH(Color) = 7 AND Color LIKE '#%')");

                            t.HasCheckConstraint("CK_Categories_Name_NotEmpty", "LENGTH(TRIM(Name)) > 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#6B7280",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "General tasks without specific category",
                            IsActive = true,
                            Name = "General"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#3B82F6",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Work-related tasks and projects",
                            IsActive = true,
                            Name = "Work"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#10B981",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Personal tasks and reminders",
                            IsActive = true,
                            Name = "Personal"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#EF4444",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "High priority urgent tasks",
                            IsActive = true,
                            Name = "Urgent"
                        });
                });

            modelBuilder.Entity("TaskManager.Api.Models.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("DATETIME");

                    b.Property<decimal?>("EstimatedHours")
                        .HasColumnType("DECIMAL(6,2)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("NotificationsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DueDate")
                        .HasDatabaseName("IX_Tasks_DueDate");

                    b.HasIndex("EstimatedHours")
                        .HasDatabaseName("IX_Tasks_EstimatedHours");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Tasks_Title");

                    b.HasIndex("IsCompleted", "IsDeleted")
                        .HasDatabaseName("IX_Tasks_IsCompleted_IsDeleted");

                    b.HasIndex("IsDeleted", "CreatedAt")
                        .HasDatabaseName("IX_Tasks_IsDeleted_CreatedAt");

                    b.HasIndex("DueDate", "NotificationsEnabled", "IsCompleted")
                        .HasDatabaseName("IX_Tasks_Notifications");

                    b.HasIndex("IsCompleted", "Priority", "IsDeleted")
                        .HasDatabaseName("IX_Tasks_Status_Priority");

                    b.ToTable("Tasks", null, t =>
                        {
                            t.HasCheckConstraint("CK_Tasks_DeletedAt_Logic", "(IsDeleted = 0 AND DeletedAt IS NULL) OR (IsDeleted = 1 AND DeletedAt IS NOT NULL)");

                            t.HasCheckConstraint("CK_Tasks_EstimatedHours_Positive", "EstimatedHours IS NULL OR EstimatedHours > 0");

                            t.HasCheckConstraint("CK_Tasks_EstimatedHours_Reasonable", "EstimatedHours IS NULL OR EstimatedHours <= 999.99");

                            t.HasCheckConstraint("CK_Tasks_Priority_Valid", "Priority IN (1, 2, 3)");

                            t.HasCheckConstraint("CK_Tasks_Title_NotEmpty", "LENGTH(TRIM(Title)) > 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Write comprehensive documentation for the TaskManager API",
                            DueDate = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            EstimatedHours = 2.5m,
                            IsCompleted = false,
                            IsDeleted = false,
                            NotificationsEnabled = true,
                            Priority = 2,
                            Title = "Complete project documentation",
                            UpdatedAt = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Review and approve pending pull requests in the repository",
                            DueDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            EstimatedHours = 1.0m,
                            IsCompleted = false,
                            IsDeleted = false,
                            NotificationsEnabled = true,
                            Priority = 2,
                            Title = "Review pull requests",
                            UpdatedAt = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Weekly grocery shopping - milk, bread, fruits",
                            DueDate = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            EstimatedHours = 0.5m,
                            IsCompleted = false,
                            IsDeleted = false,
                            NotificationsEnabled = true,
                            Priority = 1,
                            Title = "Buy groceries",
                            UpdatedAt = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Annual dental checkup appointment",
                            DueDate = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            EstimatedHours = 1.5m,
                            IsCompleted = false,
                            IsDeleted = false,
                            NotificationsEnabled = true,
                            Priority = 2,
                            Title = "Schedule dentist appointment",
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2023, 12, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Deploy the latest version to production environment",
                            EstimatedHours = 4.0m,
                            IsCompleted = true,
                            IsDeleted = false,
                            NotificationsEnabled = false,
                            Priority = 3,
                            Title = "Deploy to production",
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("TaskManager.Api.Models.TaskItem", b =>
                {
                    b.HasOne("TaskManager.Api.Models.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TaskManager.Api.Models.Category", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
